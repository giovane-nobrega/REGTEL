# ==============================================================================
# FICHEIRO: src/views/main_menu_view.py
# DESCRI√á√ÉO: Cont√©m a classe de interface para o menu principal da aplica√ß√£o REGTEL.
#            Exibe bot√µes de a√ß√£o dinamicamente com base no perfil do utilizador logado.
#            ATUALIZADO para usar 'place()' para o layout principal.
# ==============================================================================

import customtkinter as ctk # Biblioteca CustomTkinter para interface gr√°fica
from builtins import print, super # CORRIGIDO: Importa 'super' explicitamente para satisfazer o Pylance

class MainMenuView(ctk.CTkFrame):
    """
    Menu principal da aplica√ß√£o, com bot√µes din√¢micos baseados no perfil do
    utilizador logado. Controla quais funcionalidades o utilizador pode aceder.
    """
    def __init__(self, parent, controller):
        """
        Inicializa a MainMenuView.
        :param parent: O widget pai (geralmente a inst√¢ncia da classe App).
        :param controller: A inst√¢ncia da classe App, que atua como controlador.
        """
        super().__init__(parent)
        self.controller = controller # Armazena a refer√™ncia ao controlador principal

        self.configure(fg_color=self.controller.BASE_COLOR) # Define a cor de fundo da tela

        # R√≥tulo de t√≠tulo/boas-vindas do menu principal.
        self.title_label = ctk.CTkLabel(self, text="Menu Principal",
                                        font=ctk.CTkFont(size=28, weight="bold"),
                                        text_color=self.controller.TEXT_COLOR)
        self.title_label.place(relx=0.5, rely=0.1, anchor="n") # Posiciona o t√≠tulo centralizado no topo

        # --- Cont√™iner para os bot√µes ---
        # Este frame ser√° posicionado no centro e os bot√µes ser√£o 'pack'ados dentro dele.
        self.buttons_container_frame = ctk.CTkFrame(self, fg_color="transparent")
        # Posiciona o cont√™iner de bot√µes no centro da tela, com largura e altura relativas.
        # Ajuste relwidth/relheight conforme necess√°rio para o tamanho desejado do bloco de bot√µes.
        self.buttons_container_frame.place(relx=0.5, rely=0.25, relwidth=0.5, relheight=0.6, anchor="n")

        # --- Defini√ß√£o de todos os bot√µes poss√≠veis com cores e √≠cones Unicode ---
        # √çcones unicode s√≥lidos e preenchidos para uma melhor apar√™ncia.
        ICON_DASHBOARD = "üìä" # √çcone para dashboard
        ICON_CALL_DETAILED = "üìû" # √çcone para chamada detalhada
        ICON_CALL_SIMPLE = "‚òéÔ∏è" # √çcone para chamada simplificada
        ICON_EQUIPMENT = "‚öôÔ∏è" # √çcone para equipamento
        ICON_HISTORY = "üìö" # √çcone para hist√≥rico
        ICON_LOGOUT = "‚û°Ô∏è" # √çcone para logout (seta para fora)
        ICON_EXIT = "‚ùå" # √çcone para fechar aplica√ß√£o

        # Bot√£o para aceder ao Dashboard de Gest√£o (apenas para administradores).
        self.admin_button = ctk.CTkButton(self.buttons_container_frame, text=f"{ICON_DASHBOARD} Dashboard de Gest√£o",
                                          command=lambda: self.controller.show_frame("AdminDashboardView"),
                                          height=45, width=350, font=ctk.CTkFont(size=14, weight="bold"),
                                          fg_color=self.controller.PRIMARY_COLOR,
                                          text_color=self.controller.TEXT_COLOR,
                                          hover_color=self.controller.ACCENT_COLOR,
                                          compound="left") # Alinha o √≠cone √† esquerda do texto

        # Bot√£o para registar Ocorr√™ncia de Chamada (Detalhado) (para Parceiros e 67 Telecom).
        self.partner_button = ctk.CTkButton(self.buttons_container_frame, text=f"{ICON_CALL_DETAILED} Registrar Ocorr√™ncia de Chamada (Detalhado)",
                                            command=lambda: self.controller.show_frame("RegistrationView"),
                                            height=45, width=350, font=ctk.CTkFont(size=14),
                                            fg_color=self.controller.PRIMARY_COLOR,
                                            text_color=self.controller.TEXT_COLOR,
                                            hover_color=self.controller.ACCENT_COLOR,
                                            compound="left")

        # Bot√£o para registar Ocorr√™ncia de Chamada (Simplificado) (para Prefeitura).
        self.prefeitura_call_button = ctk.CTkButton(self.buttons_container_frame, text=f"{ICON_CALL_SIMPLE} Registrar Ocorr√™ncia de Chamada (Simplificado)",
                                                    command=lambda: self.controller.show_frame("SimpleCallView"),
                                                    height=45, width=350, font=ctk.CTkFont(size=14),
                                                    fg_color=self.controller.PRIMARY_COLOR,
                                                    text_color=self.controller.TEXT_COLOR,
                                                    hover_color=self.controller.ACCENT_COLOR,
                                                    compound="left")

        # Bot√£o para registar Suporte T√©cnico de Equipamento (para Prefeitura).
        self.prefeitura_equip_button = ctk.CTkButton(self.buttons_container_frame, text=f"{ICON_EQUIPMENT} Registrar Suporte T√©cnico de Equipamento",
                                                     command=lambda: self.controller.show_frame("EquipmentView"),
                                                     height=45, width=350, font=ctk.CTkFont(size=14),
                                                     fg_color=self.controller.PRIMARY_COLOR,
                                                     text_color=self.controller.TEXT_COLOR,
                                                     hover_color=self.controller.ACCENT_COLOR,
                                                     compound="left")

        # Bot√£o para ver o Hist√≥rico de Ocorr√™ncias (comum a todos os perfis).
        self.history_button = ctk.CTkButton(self.buttons_container_frame, text=f"{ICON_HISTORY} Ver Hist√≥rico de Ocorr√™ncias",
                                            command=lambda: self.controller.show_frame("HistoryView"),
                                            height=45, width=350, font=ctk.CTkFont(size=14),
                                            fg_color=self.controller.PRIMARY_COLOR,
                                            text_color=self.controller.TEXT_COLOR,
                                            hover_color=self.controller.ACCENT_COLOR,
                                            compound="left")

        # Bot√£o para Logout (comum a todos os perfis).
        self.logout_button = ctk.CTkButton(self.buttons_container_frame, text=f"{ICON_LOGOUT} Logout (Trocar de usu√°rio)",
                                           command=self.controller.perform_logout,
                                           height=45, width=350, font=ctk.CTkFont(size=14),
                                           fg_color=self.controller.DANGER_COLOR,
                                           text_color=self.controller.TEXT_COLOR,
                                           hover_color=self.controller.DANGER_HOVER_COLOR,
                                           compound="left")

        # Bot√£o para Fechar a Aplica√ß√£o (comum a todos os perfis).
        self.exit_button = ctk.CTkButton(self.buttons_container_frame, text=f"{ICON_EXIT} Fechar Aplica√ß√£o",
                                         command=self.controller.quit,
                                         height=45, width=350, font=ctk.CTkFont(size=14),
                                         fg_color=self.controller.GRAY_BUTTON_COLOR,
                                         text_color=self.controller.TEXT_COLOR,
                                         hover_color=self.controller.GRAY_HOVER_COLOR,
                                         compound="left")

        # R√≥tulo para exibir o e-mail do utilizador logado.
        self.status_label = ctk.CTkLabel(self, text="", font=ctk.CTkFont(size=12),
                                         text_color="gray70")
        self.status_label.place(relx=0.5, rely=0.90, anchor="n") # Posicionado mais abaixo

        # NOVO: R√≥tulo para exibir a vers√£o da aplica√ß√£o.
        self.version_label = ctk.CTkLabel(self, text="", font=ctk.CTkFont(size=10),
                                          text_color="gray50")
        # Posicionado na √∫ltima linha, com padding para n√£o ficar colado na borda.
        self.version_label.place(relx=0.5, rely=0.95, anchor="n") # Posicionado no rodap√©

    def update_user_info(self, email, user_profile, app_version):
        """
        Atualiza a mensagem de boas-vindas, o e-mail do utilizador logado e a vers√£o da aplica√ß√£o.
        Chama a fun√ß√£o para exibir/esconder os bot√µes de menu com base no perfil.
        :param email: E-mail do utilizador logado.
        :param user_profile: Dicion√°rio com os dados do perfil do utilizador.
        :param app_version: A string da vers√£o atual da aplica√ß√£o.
        """
        username = user_profile.get("username", "")
        welcome_name = user_profile.get("name", username) # Usa o nome completo se dispon√≠vel
        self.title_label.configure(text=f"Bem-vindo, {welcome_name}!") # Atualiza o t√≠tulo de boas-vindas
        self.status_label.configure(text=f"Login como: {email}") # Exibe o e-mail logado
        self.version_label.configure(text=f"Vers√£o: {app_version}") # Exibe a vers√£o da aplica√ß√£o
        self.update_buttons(user_profile) # Atualiza a visibilidade dos bot√µes

    def update_buttons(self, user_profile):
        print(f"DEBUG: update_buttons chamado. User Profile: {user_profile}")
        """
        Mostra ou esconde os bot√µes de menu com base no perfil do utilizador logado.
        Garante que apenas as op√ß√µes relevantes para o perfil sejam vis√≠veis.
        :param user_profile: Dicion√°rio com os dados do perfil do utilizador.
        """
        # Esconde todos os bot√µes do cont√™iner de bot√µes inicialmente.
        for widget in self.buttons_container_frame.winfo_children():
            widget.pack_forget() # Remove o widget do layout 'pack'

        main_group = user_profile.get("main_group")
        sub_group = user_profile.get("sub_group")
        print(f"DEBUG: main_group: {main_group}, sub_group: {sub_group}")

        # L√≥gica para exibir bot√µes com base no grupo principal e subgrupo.
        # Todos os bot√µes agora s√£o 'pack'ados dentro de self.buttons_container_frame
        if main_group == "67_TELECOM" and sub_group == "SUPER_ADMIN":
            self.title_label.configure(text=f"Menu Super Admin: {user_profile.get('name')}")
            self.admin_button.pack(pady=8, padx=20, fill="x")
            self.partner_button.pack(pady=8, padx=20, fill="x")
            self.prefeitura_call_button.pack(pady=8, padx=20, fill="x")
            self.prefeitura_equip_button.pack(pady=8, padx=20, fill="x")

        elif main_group == "67_TELECOM":
            if sub_group == "ADMIN":
                self.admin_button.pack(pady=8, padx=20, fill="x")
                self.partner_button.pack(pady=8, padx=20, fill="x")
            elif sub_group in ["MANAGER", "67_TELECOM_USER", "67_INTERNET_USER"]:
                self.partner_button.pack(pady=8, padx=20, fill="x")

        elif main_group == "PARTNER":
            self.partner_button.pack(pady=8, padx=20, fill="x")

        elif main_group == "PREFEITURA":
            self.prefeitura_call_button.pack(pady=8, padx=20, fill="x")
            self.prefeitura_equip_button.pack(pady=8, padx=20, fill="x")

        # Bot√µes comuns a todos os perfis (Hist√≥rico, Logout, Fechar Aplica√ß√£o).
        self.history_button.pack(pady=8, padx=20, fill="x")

        # Adiciona um espa√ßamento maior antes dos bot√µes de sa√≠da para melhor separa√ß√£o visual.
        self.logout_button.pack(pady=(20, 8), padx=20, fill="x") # Ajuste de pady para espa√ßamento

        self.exit_button.pack(pady=8, padx=20, fill="x")
